version: "3.9"

services:
  backend-service:
    container_name: backend-service
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8881:8881"
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: "unless-stopped"
    command: bash -c "npm run migration:run && npm start"
    networks:
      - backend
      - postgres
    depends_on:
      db:
        condition: service_healthy

  frontend-app:
    container_name: frontend-app
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    restart: always
    ports:
      - 3000:3000
    networks:
      - frontend

  db:
    container_name: "${DB_NAME}"
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: "${DB_USER}"
      PGUSER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
    volumes:
      - ./db_data:/var/lib/postgresql/data/
    ports:
      - "${DB_PORT}:5432"
    networks:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_PASSWORD}"
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - postgres
    depends_on:
      db:
        condition: service_healthy

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
  postgres:
    driver: bridge

volumes:
  data:
    driver: local